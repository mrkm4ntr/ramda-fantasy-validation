// Generated by CoffeeScript 1.9.3
(function() {
  var Failure, R, Success, Validation,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  R = require('ramda');

  Validation = (function() {
    function Validation() {}

    Validation.prototype.equals = function(that) {
      return that instanceof this.constructor && R.equals(this.value, that.value);
    };

    Validation.prototype.map = function() {
      return this;
    };

    Validation.prototype.nonMonadicChain = function() {
      return this;
    };

    Validation.prototype.isSuccess = false;

    Validation.prototype.isFailure = false;

    Validation.prototype.fold = function(f1, f2) {
      if (this.isSuccess) {
        return f1(this.value);
      } else {
        return f2(this.value);
      }
    };

    Validation.of = function(value) {
      return new Success(value);
    };

    Validation.success = function(value) {
      return Validation.of(value);
    };

    Validation.failure = function(value) {
      return new Failure([value]);
    };

    Validation.liftAN = function(n, fn) {
      return R.curryN(n, function() {
        var a, i, len, ref, tmp;
        tmp = arguments[0].map(R.curry(fn));
        ref = Array.prototype.slice.call(arguments, 1, n);
        for (i = 0, len = ref.length; i < len; i++) {
          a = ref[i];
          tmp = tmp.ap(a);
        }
        return tmp;
      });
    };

    return Validation;

  })();

  Success = (function(superClass) {
    extend(Success, superClass);

    function Success(x) {
      this.value = x;
    }

    Success.prototype.map = function(fn) {
      return new Success(fn(this.value));
    };

    Success.prototype.ap = function(that) {
      if (that.isSuccess) {
        return that.map(this.value);
      } else {
        return that;
      }
    };

    Success.prototype.nonMonadicChain = function(fn) {
      return fn(this.value);
    };

    Success.prototype.isSuccess = true;

    Success.prototype.toString = function() {
      return 'Validation.Success(' + R.toString(this.value) + ')';
    };

    return Success;

  })(Validation);

  Failure = (function(superClass) {
    extend(Failure, superClass);

    function Failure(x) {
      this.value = x;
    }

    Failure.prototype.ap = function(that) {
      if (that.isSuccess) {
        return this;
      } else {
        return new Failure(this.value.concat(that.value));
      }
    };

    Failure.prototype.isFailure = true;

    Failure.prototype.toString = function() {
      return 'Validation.Failure(' + R.toString(this.value) + ')';
    };

    return Failure;

  })(Validation);

  module.exports = Validation;

}).call(this);
